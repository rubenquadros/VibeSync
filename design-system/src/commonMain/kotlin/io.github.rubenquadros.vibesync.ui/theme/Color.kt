package io.github.rubenquadros.vibesync.ui.theme

import androidx.compose.material3.ColorScheme
import androidx.compose.runtime.Immutable
import androidx.compose.ui.graphics.Color

@Immutable
data class VibeSyncColors(
    val primary: Color,
    val onPrimary: Color,
    val primaryContainer: Color,
    val onPrimaryContainer: Color,
    val secondary: Color,
    val onSecondary: Color,
    val secondaryContainer: Color,
    val onSecondaryContainer: Color,
    val tertiary: Color,
    val onTertiary: Color,
    val tertiaryContainer: Color,
    val onTertiaryContainer: Color,
    val disabled: Color,
    val disabledVariant: Color,
    val onDisabled: Color,
    val error: Color,
    val onError: Color,
    val errorContainer: Color,
    val onErrorContainer: Color,
    val surface: Color,
    val surfaceContainer: Color,
    val onSurface: Color,
    val outline: Color
)

internal val VibeSyncLightColorScheme = VibeSyncColors(
    primary = Color(0xFF605690),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFE6DEFF),
    onPrimaryContainer = Color(0xFF1C1149),
    secondary = Color(0xFF006874),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFF9EEFFD),
    onSecondaryContainer = Color(0xFF001F24),
    tertiary = Color(0xFF6E528A),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFF0DBFF),
    onTertiaryContainer = Color(0xFF280D42),
    disabled = Color(0xFFD9D9D9),
    disabledVariant = Color(0xFFF2F2F2),
    onDisabled = Color(0xFF949494),
    error = Color(0xFF904A45),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF3B0908),
    surface = Color(0xFFFDF8FF),
    surfaceContainer = Color(0xFFF1ECF4),
    onSurface = Color(0xFF1C1B20),
    outline = Color(0xFF79757F)
)

internal val VibeSyncDarkColorScheme = VibeSyncColors(
    primary = Color(0xFFCABEFF),
    onPrimary = Color(0xFF31285F),
    primaryContainer = Color(0xFF483F77),
    onPrimaryContainer = Color(0xFFE6DEFF),
    secondary = Color(0xFF82D3E0),
    onSecondary = Color(0xFF00363D),
    secondaryContainer = Color(0xFF004F58),
    onSecondaryContainer = Color(0xFF9EEFFD),
    tertiary = Color(0xFFDAB9F9),
    onTertiary = Color(0xFF3E2459),
    tertiaryContainer = Color(0xFF563B71),
    onTertiaryContainer = Color(0xFFF0DBFF),
    disabled = Color(0xFF494949),
    disabledVariant = Color(0xFF262626),
    onDisabled = Color(0xFF7A7A7A),
    error = Color(0xFFFFB3AC),
    onError = Color(0xFF571E1A),
    errorContainer = Color(0xFF73332F),
    onErrorContainer = Color(0xFFFFDAD6),
    surface = Color(0xFF141318),
    surfaceContainer = Color(0xFF201F25),
    onSurface = Color(0xFFE6E1E9),
    outline = Color(0xFF938F99)
)

internal val LightColorScheme = ColorScheme(
    primary = Color(0xFF605690),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFE6DEFF),
    onPrimaryContainer = Color(0xFF1C1149),
    inversePrimary = Color(0xFFCABEFF),
    secondary = Color(0xFF006874),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFF9EEFFD),
    onSecondaryContainer = Color(0xFF001F24),
    tertiary = Color(0xFF6E528A),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFF0DBFF),
    onTertiaryContainer = Color(0xFF280D42),
    background = Color(0xFFFDF8FF),
    onBackground = Color(0xFF1C1B20),
    surface = Color(0xFFFDF8FF),
    onSurface = Color(0xFF1C1B20),
    surfaceVariant = Color(0xFFE6E0EC),
    onSurfaceVariant = Color(0xFF48454E),
    surfaceTint = Color(0xFF605690),
    inverseSurface = Color(0xFF312F36),
    inverseOnSurface = Color(0xFFF4EFF7),
    error = Color(0xFF904A45),
    onError = Color(0xFFFFFFFF),
    errorContainer = Color(0xFFFFDAD6),
    onErrorContainer = Color(0xFF3B0908),
    outline = Color(0xFF79757F),
    outlineVariant = Color(0xFFC9C4D0),
    scrim = Color(0xFF000000),
    surfaceDim = Color(0xFFDDD8E0),
    surfaceBright = Color(0xFFFDF8FF),
    surfaceContainer = Color(0xFF1ECF4),
    surfaceContainerLow = Color(0xFFF7F2FA),
    surfaceContainerLowest = Color(0xFFFFFFFF),
    surfaceContainerHigh = Color(0xFFEBE6EE),
    surfaceContainerHighest = Color(0xFFE6E1E9)
)

internal val DarkColorScheme = ColorScheme(
    primary = Color(0xFFCABEFF),
    onPrimary = Color(0xFF31285F),
    primaryContainer = Color(0xFF483F77),
    onPrimaryContainer = Color(0xFFE6DEFF),
    inversePrimary = Color(0xFF605690),
    secondary = Color(0xFF82D3E0),
    onSecondary = Color(0xFF00363D),
    secondaryContainer = Color(0xFF004F58),
    onSecondaryContainer = Color(0xFF9EEFFD),
    tertiary = Color(0xFFDAB9F9),
    onTertiary = Color(0xFF3E2459),
    tertiaryContainer = Color(0xFF563B71),
    onTertiaryContainer = Color(0xFFF0DBFF),
    background = Color(0xFF141318),
    onBackground = Color(0xFFE6E1E9),
    surface = Color(0xFF141318),
    onSurface = Color(0xFFE6E1E9),
    surfaceVariant = Color(0xFF48454E),
    onSurfaceVariant = Color(0xFFC9C4D0),
    surfaceTint = Color(0xFFCABEFF),
    inverseSurface = Color(0xFFE6E1E9),
    inverseOnSurface = Color(0xFF312F36),
    error = Color(0xFFFFB3AC),
    onError = Color(0xFF571E1A),
    errorContainer = Color(0xFF73332F),
    onErrorContainer = Color(0xFFFFDAD6),
    outline = Color(0xFF938F99),
    outlineVariant = Color(0xFF48454E),
    scrim = Color(0xFF000000),
    surfaceDim = Color(0xFF141318),
    surfaceBright = Color(0xFF3A383E),
    surfaceContainer = Color(0xFF201F25),
    surfaceContainerLow = Color(0xFF1C1B20),
    surfaceContainerLowest = Color(0xFF0F0D13),
    surfaceContainerHigh = Color(0xFF2B292F),
    surfaceContainerHighest = Color(0xFF36343A)
)